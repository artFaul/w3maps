//===========================================================================
// 
// Archmage
// 
//   Warcraft III AI script
//   Generated by the Warcraft III World Editor
//   Date: Wed Apr 24 20:58:25 2019
// 
//===========================================================================

//***************************************************************************
//*
//*  Global Variables
//*
//***************************************************************************

globals
    integer                 attackWave                 = 1
    integer                 nextDelay                  = 0
    integer                 awGold                     = 0
    integer                 awWood                     = 0

    // Conditions
    boolean                 gCond_more_units           = false
endglobals

//***************************************************************************
//*
//*  Utility Functions
//*
//***************************************************************************

//===========================================================================
function CheckLastCommand takes boolean pop returns integer
    local integer cmd = GetLastCommand()
    if (pop) then
        call PopLastCommand(  )
    endif
    return cmd
endfunction

//===========================================================================
function CheckLastCommandData takes boolean pop returns integer
    local integer data = GetLastData()
    if (pop) then
        call PopLastCommand(  )
    endif
    return data
endfunction

//===========================================================================
function TotalFoodProduced takes nothing returns integer
    return GetPlayerState(ai_player,PLAYER_STATE_RESOURCE_FOOD_CAP)
endfunction

//===========================================================================
function ExpansionNeeded takes nothing returns boolean
    return take_exp
endfunction

//===========================================================================
function BuildExpansion takes integer hallID, integer mineID returns nothing
    if (HallsCompleted(hallID)) then
        call SetBuildExpa( TownCount(hallID) + 1, mineID )
    endif
endfunction

//===========================================================================
function CurrentAttackWave takes nothing returns integer
    return attackWave
endfunction

//===========================================================================
function ResetAttackUnits takes nothing returns nothing
    set awGold = 0
    set awWood = 0
    call InitAssaultGroup(  )
endfunction

//===========================================================================
function AddAttackUnit takes integer minQty, integer maxQty, integer unitID returns nothing
    // Track attacking gold workers
    if (unitID == 'hpea') then
        set awGold = awGold + minQty
    endif

    // Track attacking wood workers
    if (unitID == 'hpea') then
        set awWood = awWood + minQty
    endif

    call SetAssaultGroup( minQty, maxQty, unitID )
endfunction

//***************************************************************************
//*
//*  Basic Options
//*
//***************************************************************************

//===========================================================================
function InitOptions takes nothing returns nothing
    call SetCampaignAI(  )
    call SetDefendPlayer( false )
    call SetRandomPaths( true )
    call SetTargetHeroes( false )
    call SetPeonsRepair( true )
    call SetHeroesFlee( false )
    call SetHeroesBuyItems( true )
    call SetUnitsFlee( false )
    call SetGroupsFlee( false )
    call SetWatchMegaTargets( false )
    call SetIgnoreInjured( false )
    call SetHeroesTakeItems( false )
    call SetSlowChopping( true )
    call SetCaptainChanges( false )
    call SetSmartArtillery( true )
endfunction

//***************************************************************************
//*
//*  Conditions
//*
//***************************************************************************

//===========================================================================
// Updates the values of all preset conditions
//===========================================================================
function UpdateConditions takes nothing returns nothing
    set gCond_more_units = ( FoodUsed(  ) >= 30 )
endfunction

//***************************************************************************
//*
//*  Heroes
//*
//***************************************************************************

//===========================================================================
// Stores hero ID and skills
//===========================================================================
function SetHero takes integer order, integer heroid returns nothing
    if (order == 1) then
        set hero_id = heroid
        if (heroid == 'Hamg') then
            set skills1[ 1] = 'AHbz'
            set skills1[ 2] = 'AHab'
            set skills1[ 3] = 'AHwe'
            set skills1[ 4] = 'AHbz'
            set skills1[ 5] = 'AHab'
            set skills1[ 6] = 'AHmt'
            set skills1[ 7] = 'AHwe'
            set skills1[ 8] = 'AHbz'
            set skills1[ 9] = 'AHab'
            set skills1[10] = 'AHwe'
        endif
    endif
endfunction

//===========================================================================
// Selects hero IDs for three possible heroes
//===========================================================================
function SelectHeroes takes nothing returns nothing
    local integer roll = GetRandomInt(1,100)
    call SetHero( 1, 'Hamg' )
endfunction

//===========================================================================
// Returns the hero skill for the given hero and level
//===========================================================================
function ChooseHeroSkill takes nothing returns integer
    local integer curHero = GetHeroId()
    local integer level = GetHeroLevelAI()

    if (level > max_hero_level) then
        set max_hero_level = level
    endif

    if (curHero == hero_id) then
        return skills1[level]
    elseif (curHero == hero_id2) then
        return skills2[level]
    elseif (curHero == hero_id3) then
        return skills3[level]
    endif
    return 0
endfunction

//***************************************************************************
//*
//*  Building and Harvesting
//*
//***************************************************************************

//===========================================================================
// Specifies building priorities for workers
//===========================================================================
function BuildPriorities takes nothing returns nothing
    local integer mine = TownWithMine()
    call SetBuildAll( BUILD_UNIT, 1, 'htow', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'hpea', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'hpea', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'hpea', -1 )
    call SetBuildAll( BUILD_UNIT, 4, 'hpea', -1 )
    call SetBuildAll( BUILD_UNIT, 5, 'hpea', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'halt', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'hlum', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'hbla', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'hbar', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'hbar', -1 )
    call SetBuildAll( BUILD_UNIT, 6, 'hpea', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'hkee', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'hcas', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'hars', -1 )
    call SetBuildAll( BUILD_UNIT, 7, 'hpea', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'harm', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'hhou', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'hhou', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'hhou', -1 )
    call SetBuildAll( BUILD_UNIT, 4, 'hhou', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'hwtw', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'hgtw', -1 )
    call SetBuildAll( BUILD_UNIT, 5, 'hhou', -1 )
    call SetBuildAll( BUILD_UNIT, 6, 'hhou', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'hwtw', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'hgtw', -1 )
    call SetBuildAll( BUILD_UNIT, 7, 'hhou', -1 )
    call SetBuildAll( BUILD_UNIT, 8, 'hhou', -1 )
    call SetBuildAll( BUILD_UNIT, 9, 'hhou', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'hwtw', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'hgtw', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'hgra', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'Hamg', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'hfoo', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'hfoo', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'hkni', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'hkni', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'hmpr', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'hmpr', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'hsor', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'hmtm', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'hmtm', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'hrif', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'hrif', -1 )
    if (gCond_more_units) then
        call SetBuildAll( BUILD_UNIT, 3, 'hkni', -1 )
        call SetBuildAll( BUILD_UNIT, 4, 'hkni', -1 )
        call SetBuildAll( BUILD_UNIT, 3, 'hfoo', -1 )
        call SetBuildAll( BUILD_UNIT, 3, 'hmpr', -1 )
        call SetBuildAll( BUILD_UNIT, 2, 'hsor', -1 )
    endif
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rhme', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rhra', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rhar', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rhla', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rhde', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rhan', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rhpt', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rhst', -1 )
    call SetBuildAll( BUILD_UPGRADE, 2, 'Rhpt', -1 )
    call SetBuildAll( BUILD_UPGRADE, 2, 'Rhst', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rhri', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rhac', -1 )
    call SetBuildAll( BUILD_UPGRADE, 2, 'Rhac', -1 )
endfunction

//===========================================================================
// Specifies harvesting priorities for workers
//===========================================================================
function HarvestPriorities takes nothing returns nothing
    local integer mine = TownWithMine()
    local integer allGold = GetUnitCountDone('hpea')
    local integer allWood = GetUnitCountDone('hpea')
    local integer numWorkers
    set numWorkers = 4
    call HarvestGold( 0, numWorkers )
    set numWorkers = 3
    call HarvestWood( 0, numWorkers )
endfunction

//===========================================================================
// Determines all building and harvesting assignments for workers
//===========================================================================
function WorkerAssignment takes nothing returns nothing
    loop
        call UpdateConditions(  )

        // Harvesting
        call ClearHarvestAI(  )
        call HarvestPriorities(  )

        // Building
        call InitBuildArray(  )
        call BuildPriorities(  )

        call Sleep( 2 )
    endloop
endfunction

//***************************************************************************
//*
//*  Attacking
//*
//***************************************************************************

//===========================================================================
// Returns true if the minimum forces for an attack exist
//===========================================================================
function HaveMinimumAttackers takes nothing returns boolean
    local integer count

    // Check for attack wave limit
    if (attackWave > 3) then
        return false
    endif

    // First Hero Only
    if (GetUnitCountDone(hero_id) < 1) then
        return false
    endif

    return true
endfunction

//===========================================================================
// Assigns units to attack based on the given attack group
//===========================================================================
function PrepareAttackGroup takes integer groupID returns nothing
    local integer all

    // Attack Group #1: Attack 1
    if (groupID == 1) then
        call AddAttackUnit( 4,   4,   'hfoo' )
        call AddAttackUnit( 2,   2,   'hrif' )
        call AddAttackUnit( 1,   1,   'hsor' )
        call AddAttackUnit( 2,   2,   'hmpr' )

        // Attack Group #2: Attack 2
    elseif (groupID == 2) then
        call AddAttackUnit( 1,   1,   'hmtm' )
        call AddAttackUnit( 1,   1,   'hsor' )
        call AddAttackUnit( 1,   1,   'hmpr' )
        call AddAttackUnit( 2,   2,   'hkni' )
        set all = GetUnitCountDone( 'Hamg' )
        call AddAttackUnit( all, all, 'Hamg' )

        // Attack Group #3: Attack 3
    elseif (groupID == 3) then
        call AddAttackUnit( 2,   2,   'hmpr' )
        call AddAttackUnit( 2,   2,   'hmtm' )
        call AddAttackUnit( 1,   1,   'hrif' )
        set all = GetUnitCountDone( 'Hamg' )
        call AddAttackUnit( all, all, 'Hamg' )

    endif
endfunction

//===========================================================================
// Prepares an attack group based on the current attack wave
//===========================================================================
function PrepareForces takes nothing returns nothing
    if (attackWave == 1) then
        call PrepareAttackGroup( 1 )
    elseif (attackWave == 2) then
        call PrepareAttackGroup( 2 )
    elseif (attackWave == 3) then
        call PrepareAttackGroup( 3 )
    endif
endfunction

//===========================================================================
// Sleep delays for each attack wave
//===========================================================================
function AttackWaveDelay takes integer inWave returns nothing
    if (inWave < nextDelay) then
        return
    endif

    if (inWave == 0) then
        call Sleep( 120 )
    elseif (inWave == 1) then
        call Sleep( 180 )
    elseif (inWave == 2) then
        call Sleep( 200 )
    elseif (inWave == 3) then
        call Sleep( 190 )
    endif

    set nextDelay = inWave + 1
endfunction

//===========================================================================
// Advances attack wave counter
//===========================================================================
function AttackWaveUpdate takes nothing returns nothing
    call AttackWaveDelay( attackWave )
    set attackWave = attackWave + 1
    if (attackWave > 3) then
        set attackWave = 3
        set nextDelay = attackWave + 1
    endif
endfunction

//===========================================================================
// Basic attack functionality
//===========================================================================
function AttackTarget takes unit target, boolean addAlliance returns nothing
    if (target == null) then
        return
    endif
    if (addAlliance) then
        call SetAllianceTarget( target )
    endif
    call FormGroup( 3, true )
    call AttackMoveKillA( target )
    if (not addAlliance) then
        call SetAllianceTarget( null )
    endif
endfunction

//===========================================================================
// Initiates an attack based on target priorities
//===========================================================================
function LaunchAttack takes nothing returns nothing
    local unit target = null
    local boolean setAlly = true

    // Don't launch any attack while town is threatened
    if (TownThreatened()) then
        call Sleep( 2 )
        return
    endif

    // Target Priority #1
    if (target == null) then
        set target = GetAllianceTarget()
        if (target != null) then
            set setAlly = false
        endif
    endif

    // Target Priority #2
    if (target == null) then
        set target = GetMegaTarget()
    endif

    // Target Priority #3
    if (target == null) then
        set target = GetEnemyExpansion()
    endif

    // Target Priority #4
    if (target == null) then
        set target = GetEnemyExpansion()
        if (target == null) then
            call StartGetEnemyBase(  )
            loop
                exitwhen (not WaitGetEnemyBase())
                call SuicideSleep( 1 )
            endloop
            set target = GetEnemyBase()
        endif
    endif

    // Attack the target and increment attack wave
    if (target != null) then
        call AttackTarget( target, setAlly )
        call AttackWaveUpdate(  )
    else
        // If no target was found, sleep a bit before trying again
        call Sleep( 20 )
    endif
endfunction

//===========================================================================
// Determines all attacking assignments
//===========================================================================
function AttackAssignment takes nothing returns nothing
    call StaggerSleep( 0, 2 )
    if (attackWave == 1) then
        call AttackWaveDelay( 0 )
    endif
    loop
        loop
            call UpdateConditions(  )
            exitwhen (HaveMinimumAttackers() and not CaptainRetreating())
            call Sleep( 2 )
        endloop
        call ResetAttackUnits(  )
        call PrepareForces(  )
        call LaunchAttack(  )
    endloop
endfunction

//***************************************************************************
//*
//*  Main Entry Point
//*
//***************************************************************************

//===========================================================================
function main takes nothing returns nothing
    call InitAI(  )
    call InitOptions(  )
    call SelectHeroes(  )
    call CreateCaptains(  )
    call SetHeroLevels( function ChooseHeroSkill )

    call Sleep( 0.1 )
    call StartThread( function WorkerAssignment )
    call StartThread( function AttackAssignment )
    call PlayGame(  )
endfunction

